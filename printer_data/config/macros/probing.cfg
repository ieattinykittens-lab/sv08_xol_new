# ==================== PROBING AND LEVELING ====================
# ==================== macros/probing.cfg ====================
# Probe operations, QGL, and nozzle cleaning

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:QUAD_GANTRY_LEVEL_BASE
gcode:
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        {% if current_target_temp <= mesh_calibrate_temp %}
          M190 S{mesh_calibrate_temp}
        {% else %}
          M190 S{current_target_temp}
        {% endif %}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    QUAD_GANTRY_LEVEL_BASE

    {% if current_target_temp == 0 %}
        M140 S0
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:

    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        {% if current_target_temp <= mesh_calibrate_temp %}
          M190 S{mesh_calibrate_temp}
        {% else %}
          M190 S{current_target_temp}
        {% endif %}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    BED_MESH_CLEAR

    BED_MESH_CALIBRATE_BASE ADAPTIVE=1 #METHOD=rapid_scan

    {% if current_target_temp == 0 %}
        M140 S0
    {% endif %}

[gcode_macro GANTRY_LEVELING]
 description: Enhanced Gantry Leveling with automatic detection of QGL or Z-Tilt
 gcode:
     SAVE_GCODE_STATE NAME=STATE_TRAM

     # Check homing status and home if needed
     {% if "xyz" not in printer.toolhead.homed_axes %}
         M117 Homing all axes first
         G28                             # Full home if not already homed
     {% elif 'z' not in printer.toolhead.homed_axes %}
         M117 Homing Z axis
         G28 Z                          # Home Z if only Z is unhomed
     {% endif %}

     # Check if QGL or Z_TILT is available
     {% if 'quad_gantry_level' in printer %}
         # Only proceed with QGL if it hasn't been applied
         {% if not printer.quad_gantry_level.applied %}
             M117 Performing Quad Gantry Level

             # First pass - Coarse adjustment
             # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
             QUAD_GANTRY_LEVEL horizontal_move_z=5 #retry_tolerance=1                          # Eddy-NG installed? Uncomment retry tolerance=1

             # Second pass - Fine adjustment
             #QUAD_GANTRY_LEVEL horizontal_move_z=2                                            # Eddy-NG installed? Uncomment QUAD_GANTRY_LEVEL horizontal_move_z=2

             # Home Z after leveling
             M117 Re-homing Z after QGL
             G28 Z
         {% else %}
             M117 QGL already applied
         {% endif %}

     {% elif 'z_tilt' in printer %}
         M117 Performing Z-Tilt Adjustment

         # First pass with retry tolerance
         Z_TILT_ADJUST horizontal_move_z=5 #RETRY_TOLERANCE=1                                # Eddy-NG installed? Uncomment RETRY_TOLERANCE=1

         # Second pass for fine adjustment
         #Z_TILT_ADJUST horizontal_move_z=2                                                  # Eddy-NG installed? Uncomment Z_TILT_ADJUST horizontal_move_z=2

         # Home Z after leveling
         M117 Re-homing Z after Z-Tilt
         G28 Z

     {% else %}
         M117 No QGL or Z-Tilt available - Use SCREWS_TILT_CALCULATE
         RESPOND TYPE=error MSG="Neither Quad Gantry Level nor Z-Tilt configurations found"
         RESPOND TYPE=command MSG="Try running: SCREWS_TILT_CALCULATE"
     {% endif %}

     M117 Gantry Calibration Complete
     RESTORE_GCODE_STATE NAME=STATE_TRAM

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle with LED status and smart Z homing
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    status_cleaning

    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set wipes = params.WIPES|default(5)|int %}

    # Brush bounds (298,-5) â†’ (333,6), staggered Z
    {% set brush = {
        'x_min': 298,
        'y_min': -5,
        'x_max': 333,
        'y_max': 6
    } %}
    {% set brush_z = {
        'light': 3.5,
        'medium': 3.3,
        'deep': 3.1
    } %}
    {% set brush_speeds = printer['gcode_macro _global_var'].brush_speeds %}
    {% set safe_offset = printer['gcode_macro _global_var'].brush_safe_offset %}

    _LOG_STATUS MSG="Starting nozzle cleaning sequence" LED=cleaning

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            _LOG_STATUS MSG="Homing all axes for nozzle cleaning" LED=homing
            G28
            _LOG_STATUS MSG="All axes homed successfully" LED=cleaning
        {% else %}
            {% if not 'z' in printer.toolhead.homed_axes %}
                _LOG_STATUS MSG="Homing Z axis for nozzle cleaning" LED=homing
                G28 Z
                _LOG_STATUS MSG="Z axis homed successfully" LED=cleaning
            {% endif %}
        {% endif %}
    {% endif %}

    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            _LOG_STATUS MSG="Performing Z-tilt adjustment for cleaning" LED=leveling
            Z_TILT_ADJUST
            G28 Z
            _LOG_STATUS MSG="Z-tilt adjustment completed" LED=cleaning
        {% endif %}
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            _LOG_STATUS MSG="Performing Quad Gantry Level for cleaning" LED=leveling
            QUAD_GANTRY_LEVEL SKIP_FINAL_Z_HOME=1
            _LOG_STATUS MSG="Quad Gantry Level completed" LED=cleaning
        {% endif %}
    {% endif %}

    _LOG_STATUS MSG="Moving to cleaning position" LED=cleaning
    G90
    G1 X{brush.x_min + safe_offset} Y{brush.y_min} Z10 F{brush_speeds.travel}

    _HEAT_FOR_FILAMENT TEMP={cleaning_temp} OPERATION="nozzle cleaning"

    G91
    G90
    M106 S127

    _LOG_STATUS MSG="Performing {wipes} cleaning cycles" LED=cleaning

    {% for wipe in range(wipes) %}
        {% if wipe % 2 == 0 %}
            _LOG_STATUS MSG="Cleaning cycle {wipe + 1}/{wipes}" LED=cleaning
        {% endif %}

        # Linear pattern at staggered Z
        {% for z_level in ['light', 'medium', 'deep'] %}
            G1 Z{brush_z[z_level]} F{brush_speeds.z_move}
            G1 X{brush.x_min} Y{brush.y_min} F{brush_speeds.travel}
            G1 X{brush.x_max} F{brush_speeds.wipe * 60}
            G1 Y{brush.y_max} F{brush_speeds.wipe * 60}
            G1 X{brush.x_min} F{brush_speeds.wipe * 60}
            G1 Y{brush.y_min} F{brush_speeds.wipe * 60}
        {% endfor %}

        # Diagonal pattern on odd wipes at lighter depths
        {% if wipe % 2 == 1 %}
            {% for z_level in ['light', 'medium'] %}
                G1 Z{brush_z[z_level]} F{brush_speeds.z_move}
                G1 X{brush.x_min} Y{brush.y_min} F{brush_speeds.travel}
                G1 X{brush.x_max} Y{brush.y_max} F{brush_speeds.wipe * 60}
                G1 X{brush.x_min} Y{brush.y_max} F{brush_speeds.wipe * 60}
                G1 X{brush.x_max} Y{brush.y_min} F{brush_speeds.wipe * 60}
            {% endfor %}
        {% endif %}
    {% endfor %}

    G1 Z{brush_z.light} F{brush_speeds.z_move}
    G1 X{brush.x_min + safe_offset} Y{brush.y_min} F{brush_speeds.travel}
    M400
    _LOG_STATUS MSG="Nozzle cleaning completed" LED=ready
    M107

    _LOG_STATUS MSG="Returning to safe position" LED=ready
    G91
    G1 Z10 F{brush_speeds.z_move}
    G90
    G28 Z

    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE


[gcode_macro TEST_BRUSH_LOCATION]
description: Test new brush cleaning location at safe Z height
gcode:
    {% set wipes = params.WIPES|default(3)|int %}
    {% set test_z = 13 %}  # Safe test height

    # New brush coordinates
    {% set brush_x_min = 261 %}
    {% set brush_x_max = 283 %}
    {% set brush_y_min = 354 %}
    {% set brush_y_max = 359 %}
    {% set safe_offset = 10 %}

    SAVE_GCODE_STATE NAME=TEST_BRUSH_STATE
    status_cleaning

    _LOG_STATUS MSG="Testing new brush location at Z{test_z}" LED=cleaning

    # Ensure homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Homing all axes for brush test" LED=homing
        G28
    {% endif %}

    G90

    # Move to safe approach position
    _LOG_STATUS MSG="Moving to brush test area"
    G1 X{brush_x_min - safe_offset} Y{brush_y_min} Z{test_z} F7800

    _LOG_STATUS MSG="Starting {wipes} test cleaning cycles at Z{test_z}"

    {% for wipe in range(wipes) %}
        _LOG_STATUS MSG="Test cycle {wipe + 1}/{wipes}"

        # Linear cleaning pattern
        # Wipe left to right across front
        G1 X{brush_x_min} Y{brush_y_min} F7800
        G1 X{brush_x_max} F12000  # 200mm/min wipe speed

        # Wipe front to back at right side
        G1 Y{brush_y_max} F12000

        # Wipe right to left across back
        G1 X{brush_x_min} F12000

        # Wipe back to front at left side
        G1 Y{brush_y_min} F12000

        # Diagonal wipes (every other cycle)
        {% if wipe % 2 == 1 %}
            G1 X{brush_x_min} Y{brush_y_min} F7800
            G1 X{brush_x_max} Y{brush_y_max} F12000
            G1 X{brush_x_min} Y{brush_y_max} F12000
            G1 X{brush_x_max} Y{brush_y_min} F12000
        {% endif %}
    {% endfor %}

    # Return to safe position
    G1 X{brush_x_min - safe_offset} Y{brush_y_min} F7800

    _LOG_STATUS MSG="Brush location test completed" LED=ready

    # Show the coordinates for reference
    _LOG_STATUS MSG="Tested area: X{brush_x_min}-{brush_x_max}, Y{brush_y_min}-{brush_y_max} at Z{test_z}"

    RESTORE_GCODE_STATE NAME=TEST_BRUSH_STATE

[gcode_macro QGL_CORNER_CHECK]
gcode:
  {% set P = printer.configfile.settings.quad_gantry_level.points %}
  G90
  G0 Z10 F6000
  {% for pt in P %}
    G0 X{pt[0]} Y{pt[1]} F9000
    PROBE
  {% endfor %}

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default
